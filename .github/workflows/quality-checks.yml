name: Code Quality Checks

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install flake8 mypy pytest pytest-cov black isort pre-commit

    - name: Install project in development mode
      run: pip install -e .

    - name: Set up pre-commit
      run: |
        pre-commit install
        pre-commit autoupdate

    - name: Run pre-commit hooks
      run: pre-commit run --all-files --show-diff-on-failure

    - name: Flake8 Code Quality Check
      run: |
        echo "Running Flake8 static analysis..."
        flake8 --config=config/.flake8 --statistics --count --show-source .
        echo "Flake8 completed."

    - name: MyPy Type Checking
      run: |
        echo "Running MyPy type checking..."
        mypy --config-file=mypy.ini --show-error-codes --show-error-context .
        echo "MyPy completed."

    - name: Run comprehensive test suite
      run: |
        echo "Running comprehensive test suite..."
        pytest -xvs --tb=short --strict-markers --cov=. --cov-report=xml --cov-report=html tests/
        echo "Test suite completed."

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Code complexity analysis
      run: |
        pip install radon xenon
        echo "Running code complexity analysis..."
        radon cc --min B --show-complexity .
        radon mi --min B .
        xenon --max-absolute B --max-modules B --max-average A .

    - name: Security vulnerability scanning
      run: |
        pip install bandit safety
        echo "Running security scans..."
        bandit -r . -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Generate quality report
      run: |
        echo "Generating comprehensive quality report..."
        mkdir -p .github/reports
        python scripts/development/code_refactor_tool.py --report --project-root .

        echo "## Code Quality Summary" > .github/reports/quality-summary.md
        echo "- **Python Version**: ${{ matrix.python-version }}" >> .github/reports/quality-summary.md
        echo "- **Flake8**: $(flake8 --count . 2>/dev/null || echo 'N/A') violations" >> .github/reports/quality-summary.md
        echo "- **MyPy**: Type checking $(mypy . --config-file=mypy.ini 2>/dev/null && echo 'PASSED' || echo 'FAILED')" >> .github/reports/quality-summary.md
        echo "- **Tests**: $(pytest --collect-only -q 2>/dev/null | tail -1 || echo 'N/A')" >> .github/reports/quality-summary.md

    - name: Upload quality artifacts
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports-py${{ matrix.python-version }}
        path: |
          .github/reports/
          .taskmaster/reports/
          htmlcov/
          bandit-report.json
          safety-report.json
          coverage.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run integration tests
      run: |
        echo "Running integration test suite..."
        python tests/integration/run_integration_tests.py
        echo "Integration tests completed."

    - name: Performance benchmarks
      run: |
        echo "Running performance benchmarks..."
        pytest tests/integration/test_performance.py -v --benchmark-only || true
        echo "Performance benchmarks completed."

  quality-gates:
    runs-on: ubuntu-latest
    needs: [quality-checks, integration-tests]
    if: always()

    steps:
    - name: Check quality gates
      run: |
        echo "Evaluating quality gates..."

        # Define quality thresholds
        MAX_FLAKE8_VIOLATIONS=2000
        MIN_TEST_COVERAGE=80

        # This would be enhanced with actual gate checking logic
        echo "Quality gates evaluation completed."

        # Fail if critical quality gates are not met
        if [ "${{ needs.quality-checks.result }}" != "success" ]; then
          echo "‚ùå Quality checks failed"
          exit 1
        fi

        echo "‚úÖ All quality gates passed"

    - name: Post quality summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const qualitySummary = `
          ## üîç Code Quality Report

          **Status**: ${{ needs.quality-checks.result == 'success' && '‚úÖ PASSED' || '‚ùå FAILED' }}

          ### Quality Checks
          - **Static Analysis**: ${{ needs.quality-checks.result }}
          - **Integration Tests**: ${{ needs.integration-tests.result }}
          - **Security Scans**: Completed
          - **Type Checking**: Completed

          ### Next Steps
          ${needs.quality-checks.result !== 'success' ? '- Review and fix quality violations before merging' : '- Ready for code review and merge'}

          *Generated by automated quality pipeline*
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: qualitySummary
          });
