name: Frontend Tests

on:
  push:
    branches: [main, develop]
    paths:
      - "*.js"
      - "*.jsx"
      - "*.ts"
      - "*.tsx"
      - "*.mjs"
      - "*.json"
      - "app/**"
      - "components/**"
      - "contexts/**"
      - "hooks/**"
      - "lib/**"
      - "styles/**"
      - "public/**"
      - ".github/workflows/frontend-tests.yml"
  pull_request:
    branches: [main]
    paths:
      - "*.js"
      - "*.jsx"
      - "*.ts"
      - "*.tsx"
      - "*.mjs"
      - "*.json"
      - "app/**"
      - "components/**"
      - "contexts/**"
      - "hooks/**"
      - "lib/**"
      - "styles/**"
      - "public/**"
      - ".github/workflows/frontend-tests.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ["18", "20"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run type checking
        run: npm run type-check || npx tsc --noEmit

      - name: Run linting
        run: npm run lint || npx next lint

      - name: Check code formatting
        run: |
          npm install --save-dev prettier
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Run tests
        run: |
          # Check if test script exists, otherwise skip
          if npm run | grep -q "test"; then
            npm test
          else
            echo "No test script found, skipping tests"
          fi

      - name: Build Next.js application
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
        run: npm run build

      - name: Check bundle size
        run: |
          # Install size-limit if not present
          npm install --save-dev @size-limit/preset-app
          # Check if size-limit config exists
          if [ -f ".size-limit.json" ]; then
            npx size-limit
          else
            echo "No size-limit config found, skipping bundle size check"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '20'
        with:
          name: nextjs-build
          path: |
            .next
            out
            !.next/cache

      - name: Test production build
        run: |
          # Start the production server in the background
          npm run start &
          SERVER_PID=$!

          # Wait for server to start
          sleep 10

          # Test if the server is responding
          curl -f http://localhost:3000 || exit 1

          # Kill the server
          kill $SERVER_PID || true

  docker-build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: freeagentics-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=http://localhost:8000/api/v1

      - name: Test Docker image
        run: |
          # Run the container
          docker run -d --name test-frontend -p 3000:3000 freeagentics-frontend:test

          # Wait for it to start
          sleep 15

          # Check if it's running
          docker ps | grep test-frontend

          # Test if it responds
          curl -f http://localhost:3000 || (docker logs test-frontend && exit 1)

          # Clean up
          docker stop test-frontend
          docker rm test-frontend

  lighthouse:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install and build
        run: |
          npm ci --legacy-peer-deps
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
