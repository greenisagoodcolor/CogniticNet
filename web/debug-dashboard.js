const puppeteer = require('puppeteer');\n\nasync function debugDashboard() {\n  const browser = await puppeteer.launch({ headless: false });\n  const page = await browser.newPage();\n  \n  try {\n    console.log('🔍 Loading dashboard...');\n    await page.goto('http://localhost:3000/dashboard', { waitUntil: 'networkidle0' });\n    \n    // Check for knowledge graph elements\n    console.log('\\n📊 Checking Knowledge Graph elements:');\n    \n    const svgElements = await page.$$('svg');\n    console.log(`Found ${svgElements.length} SVG elements`);\n    \n    for (let i = 0; i < svgElements.length; i++) {\n      const svg = svgElements[i];\n      const bbox = await svg.boundingBox();\n      const classes = await svg.evaluate(el => el.className.baseVal || el.className);\n      console.log(`SVG ${i + 1}: ${bbox ? `${bbox.width}x${bbox.height}` : 'no size'}, classes: ${classes}`);\n    }\n    \n    // Check for specific D3.js indicators\n    const d3Elements = await page.$$('[class*=\"node\"], [class*=\"link\"], circle, line');\n    console.log(`\\n🎯 Found ${d3Elements.length} potential D3.js elements`);\n    \n    // Check for knowledge graph text\n    const knowledgeText = await page.$eval('body', el => {\n      const text = el.innerText;\n      const matches = text.match(/knowledge|graph|nodes|edges/gi) || [];\n      return matches;\n    });\n    console.log(`\\n📝 Knowledge-related text found: ${knowledgeText.join(', ')}`);\n    \n    // Check Redux state\n    const reduxState = await page.evaluate(() => {\n      if (window.__REDUX_DEVTOOLS_EXTENSION__) {\n        return 'Redux DevTools detected';\n      }\n      return 'No Redux DevTools';\n    });\n    console.log(`\\n🔧 Redux: ${reduxState}`);\n    \n    // Take a screenshot\n    await page.screenshot({ path: 'dashboard-debug.png', fullPage: true });\n    console.log('\\n📸 Screenshot saved as dashboard-debug.png');\n    \n  } catch (error) {\n    console.error('❌ Error:', error.message);\n  } finally {\n    await browser.close();\n  }\n}\n\ndebugDashboard(); 